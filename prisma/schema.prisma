generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model config {
  key   String @db.VarChar
  value String @db.VarChar
  id    Int    @id(map: "config_pk") @default(autoincrement())
}

model fantasy_teams {
  id               Int                @id(map: "fantasy_teams_pk") @default(autoincrement())
  fantasy_team_key String             @unique(map: "fantasy_team_key_unique") @db.VarChar
  name             String             @db.VarChar
  league_key       String             @db.VarChar
  yahoo_fantasy_id Int                @db.Integer
  waiver_priority  Int                @db.Integer
  league_metadata  league_metadata    @relation(fields: [league_key], references: [league_key], onDelete: Restrict, onUpdate: Restrict, map: "fantasy_teams_league_metadata_fk")
  nfl_players      nfl_players[]
  league_standings league_standings[]
}

model fantasy_weeks {
  id              Int             @id(map: "fantasy_weeks_pk") @default(autoincrement())
  week_start      String          @db.VarChar
  week_end        String          @db.VarChar
  league_key      String          @db.VarChar
  week_number     Int             @db.Integer
  league_metadata league_metadata @relation(fields: [league_key], references: [league_key], onDelete: Restrict, onUpdate: Restrict, map: "fantasy_weeks_league_metadata_fk")
}

model league_metadata {
  id               Int                @id(map: "league_metadata_pk") @default(autoincrement())
  league_key       String             @unique(map: "league_metadata_league_key_unique") @db.VarChar
  league_name      String             @db.VarChar
  league_id        Int                @db.Integer
  game_key         Int                @db.Integer
  start_date       String             @db.VarChar
  end_date         String             @db.VarChar
  fantasy_weeks    fantasy_weeks[]
  fantasy_teams    fantasy_teams[]
  matchups         matchups[]
  nfl_players      nfl_players[]
  league_standings league_standings[]
  transactions     transactions[]
}

model nfl_players {
  id                 Int             @id(map: "nfl_players_pk") @default(autoincrement())
  player_key         String          @db.VarChar
  league_key         String          @db.VarChar
  team_key           String          @default("FA") @db.VarChar
  player_name        String          @db.VarChar
  nfl_team_name      String          @db.VarChar
  uniform_number     Int             @db.Integer
  display_position   String          @db.VarChar
  is_undroppable     Boolean         @db.Boolean
  eligible_positions String[]        @db.VarChar
  player_id          Int             @db.Integer
  league_metadata    league_metadata @relation(fields: [league_key], references: [league_key], onDelete: Restrict, onUpdate: Restrict, map: "fantasy_weeks_league_metadata_fk")
  fantasy_teams      fantasy_teams   @relation(fields: [team_key], references: [fantasy_team_key], onDelete: Restrict, onUpdate: Restrict, map: "nfl_players_fantasy_team_fk")
}

model matchups {
  id                 Int             @id(map: "matchups_pk") @default(autoincrement())
  league_key         String          @db.VarChar
  team_key           String          @db.VarChar
  week               Int             @db.Integer
  winner_team_key    String          @db.VarChar
  winner_proj_points Decimal         @db.Decimal(6, 2)
  winner_points      Decimal         @db.Decimal(6, 2)
  loser_team_key     String          @db.VarChar
  loser_proj_points  Decimal         @db.Decimal(6, 2)
  loser_points       Decimal         @db.Decimal(6, 2)
  league_metadata    league_metadata @relation(fields: [league_key], references: [league_key], onDelete: Restrict, onUpdate: Restrict, map: "matchups_league_metadata_fk")
}

model league_standings {
  id              Int             @id(map: "league_standings_pk") @default(autoincrement())
  league_key      String          @db.VarChar
  team_key        String          @db.VarChar
  wins            Int             @db.Integer
  losses          Int             @db.Integer
  ties            Int             @db.Integer
  rank            Int             @db.Integer
  playoff_seed    Int             @db.Integer
  points_for      Decimal         @db.Decimal(6, 2)
  points_against  Decimal         @db.Decimal(6, 2)
  league_metadata league_metadata @relation(fields: [league_key], references: [league_key], onDelete: Restrict, onUpdate: Restrict, map: "league_standings_league_metadata_fk")
  fantasy_teams   fantasy_teams   @relation(fields: [team_key], references: [fantasy_team_key], onDelete: Restrict, onUpdate: Restrict, map: "league_standings_fantasy_team_fk")
}

model transactions {
  id                     Int             @id(map: "transactions_pk") @default(autoincrement())
  transaction_key        String          @db.VarChar
  league_key             String          @db.VarChar
  type                   String          @db.VarChar
  timestamp              Int             @db.Integer
  players_in_transaction Json            @db.Json
  league_metadata        league_metadata @relation(fields: [league_key], references: [league_key], onDelete: Restrict, onUpdate: Restrict, map: "transactions_league_metadata_fk")
}
